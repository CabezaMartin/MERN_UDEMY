{"ast":null,"code":"import { basePath, apiVersion } from './config';\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from '../utils/constants';\nimport jwtDecode from 'jwt-decode';\nexport function getAccessToken() {\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n  if (!accessToken || accessToken === null) {\n    return null;\n  }\n\n  return willExpireToken(accessToken) ? null : accessToken; //return accessToken;\n}\nexport function getRefreshToken() {\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n\n  if (!refreshToken || refreshToken === null) {\n    return null;\n  }\n\n  return willExpireToken(refreshToken) ? null : refreshToken; //return accessToken;\n}\nexport function refreshToken(refreshToken) {\n  const url = `${basePath}/${apiVersion}/refresh-access-token`;\n  const bodyObj = {\n    \"refreshToken\": refreshToken\n  };\n  const params = {\n    method: \"POST\",\n    body: JSON.stringify(bodyObj),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return fetch(url, params).then(response => {\n    if (response.status !== 200) {\n      return null;\n    }\n\n    return response.json();\n  }).then(result => {\n    if (!result) {//DESLOGUEAR AL USUARIO\n    } else {\n      const {\n        accessToken,\n        refreshToken\n      } = result;\n      localStorage.setItem(ACCESS_TOKEN, accessToken);\n      localStorage.setItem(REFRESH_TOKEN, refreshToken);\n    }\n  });\n}\nexport function logout() {\n  localStorage.removeItem(ACCESS_TOKEN);\n  localStorage.removeItem(REFRESH_TOKEN);\n}\n\nfunction willExpireToken(token) {\n  const second = 60;\n  const metaToken = jwtDecode(token);\n  const {\n    exp\n  } = metaToken;\n  const now = (Date.now() + second) / 1000;\n  return now > exp; //console.log(metaToken);\n}","map":{"version":3,"sources":["C:/CURSOSUDEMY/PRACTICOS/CURSO MERN/ProyectoWebPersonal/web-personal-cliente/src/api/auth.js"],"names":["basePath","apiVersion","ACCESS_TOKEN","REFRESH_TOKEN","jwtDecode","getAccessToken","accessToken","localStorage","getItem","willExpireToken","getRefreshToken","refreshToken","url","bodyObj","params","method","body","JSON","stringify","headers","fetch","then","response","status","json","result","setItem","logout","removeItem","token","second","metaToken","exp","now","Date"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,UAArC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAGA,OAAO,SAASC,cAAT,GAA0B;AAC7B,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqBN,YAArB,CAApB;;AACA,MAAI,CAACI,WAAD,IAAgBA,WAAW,KAAK,IAApC,EAA0C;AACtC,WAAO,IAAP;AAEH;;AAED,SAAOG,eAAe,CAACH,WAAD,CAAf,GAA+B,IAA/B,GAAsCA,WAA7C,CAP6B,CAS7B;AACH;AAED,OAAO,SAASI,eAAT,GAA2B;AAC9B,QAAMC,YAAY,GAAGJ,YAAY,CAACC,OAAb,CAAqBL,aAArB,CAArB;;AACA,MAAI,CAACQ,YAAD,IAAiBA,YAAY,KAAK,IAAtC,EAA4C;AACxC,WAAO,IAAP;AAEH;;AAED,SAAOF,eAAe,CAACE,YAAD,CAAf,GAAgC,IAAhC,GAAuCA,YAA9C,CAP8B,CAS9B;AACH;AAED,OAAO,SAASA,YAAT,CAAsBA,YAAtB,EAAoC;AACvC,QAAMC,GAAG,GAAI,GAAEZ,QAAS,IAAGC,UAAW,uBAAtC;AACA,QAAMY,OAAO,GAAG;AACZ,oBAAgBF;AADJ,GAAhB;AAGA,QAAMG,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,OAAf,CAFK;AAGXM,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAHE,GAAf;AAOA,SAAOC,KAAK,CAACR,GAAD,EAAME,MAAN,CAAL,CACFO,IADE,CACGC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,aAAO,IAAP;AACH;;AACD,WAAOD,QAAQ,CAACE,IAAT,EAAP;AACH,GANE,EAOFH,IAPE,CAOGI,MAAM,IAAI;AACZ,QAAI,CAACA,MAAL,EAAa,CACT;AAEH,KAHD,MAGO;AACH,YAAM;AAAEnB,QAAAA,WAAF;AAAeK,QAAAA;AAAf,UAAgCc,MAAtC;AACAlB,MAAAA,YAAY,CAACmB,OAAb,CAAqBxB,YAArB,EAAmCI,WAAnC;AACAC,MAAAA,YAAY,CAACmB,OAAb,CAAqBvB,aAArB,EAAoCQ,YAApC;AACH;AACJ,GAhBE,CAAP;AAkBH;AAED,OAAO,SAASgB,MAAT,GAAkB;AACrBpB,EAAAA,YAAY,CAACqB,UAAb,CAAwB1B,YAAxB;AACAK,EAAAA,YAAY,CAACqB,UAAb,CAAwBzB,aAAxB;AACH;;AAGD,SAASM,eAAT,CAAyBoB,KAAzB,EAAgC;AAC5B,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,SAAS,GAAG3B,SAAS,CAACyB,KAAD,CAA3B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAUD,SAAhB;AACA,QAAME,GAAG,GAAG,CAACC,IAAI,CAACD,GAAL,KAAaH,MAAd,IAAwB,IAApC;AACA,SAAOG,GAAG,GAAGD,GAAb,CAL4B,CAM5B;AACH","sourcesContent":["import { basePath, apiVersion } from './config';\r\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from '../utils/constants';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n\r\nexport function getAccessToken() {\r\n    const accessToken = localStorage.getItem(ACCESS_TOKEN);\r\n    if (!accessToken || accessToken === null) {\r\n        return null;\r\n\r\n    }\r\n\r\n    return willExpireToken(accessToken) ? null : accessToken;\r\n\r\n    //return accessToken;\r\n}\r\n\r\nexport function getRefreshToken() {\r\n    const refreshToken = localStorage.getItem(REFRESH_TOKEN);\r\n    if (!refreshToken || refreshToken === null) {\r\n        return null;\r\n\r\n    }\r\n\r\n    return willExpireToken(refreshToken) ? null : refreshToken;\r\n\r\n    //return accessToken;\r\n}\r\n\r\nexport function refreshToken(refreshToken) {\r\n    const url = `${basePath}/${apiVersion}/refresh-access-token`;\r\n    const bodyObj = {\r\n        \"refreshToken\": refreshToken\r\n    }\r\n    const params = {\r\n        method: \"POST\",\r\n        body: JSON.stringify(bodyObj),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    };\r\n    return fetch(url, params)\r\n        .then(response => {\r\n            if (response.status !== 200) {\r\n                return null;\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(result => {\r\n            if (!result) {\r\n                //DESLOGUEAR AL USUARIO\r\n\r\n            } else {\r\n                const { accessToken, refreshToken } = result;\r\n                localStorage.setItem(ACCESS_TOKEN, accessToken);\r\n                localStorage.setItem(REFRESH_TOKEN, refreshToken);\r\n            }\r\n        })\r\n\r\n}\r\n\r\nexport function logout() {\r\n    localStorage.removeItem(ACCESS_TOKEN);\r\n    localStorage.removeItem(REFRESH_TOKEN);\r\n}\r\n\r\n\r\nfunction willExpireToken(token) {\r\n    const second = 60;\r\n    const metaToken = jwtDecode(token);\r\n    const { exp } = metaToken;\r\n    const now = (Date.now() + second) / 1000;\r\n    return now > exp;\r\n    //console.log(metaToken);\r\n}"]},"metadata":{},"sourceType":"module"}