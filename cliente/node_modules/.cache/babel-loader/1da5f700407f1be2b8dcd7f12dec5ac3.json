{"ast":null,"code":"var _jsxFileName = \"C:\\\\CURSOSUDEMY\\\\PRACTICOS\\\\CURSO MERN\\\\ProyectoWebPersonal\\\\web-personal-cliente\\\\src\\\\components\\\\Admin\\\\User\\\\ListUsers\\\\ListUsers.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./ListUsers.scss\";\nimport { EditOutlined, StopOutlined, DeleteOutlined, CheckOutlined, UserAddOutlined } from \"@ant-design/icons\";\nimport { Tooltip, Switch, List, Button, Avatar, notification, Modal as ModalAntd } from \"antd\";\nimport NoAvatar from \"../../../../assets/img/png/no-avatar.png\";\nimport Modal from \"../../../Admin/Modal\"; //import User from \"../../../../pages/Admin/Users/Users\";\n\nimport { getAvatarApi, activeDesactiveUserApi, deleteUserApi } from '../../../../api/user';\nimport EditUserForm from \"../../../../components/Admin/User/EditUserForm\";\nimport CreateUserForm from \"../../../../components/Admin/User/CreateUserForm\";\nimport { getAccessToken } from \"../../../../api/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  confirm\n} = ModalAntd;\nexport default function ListUsers(props) {\n  _s();\n\n  const [modalCollapsed, setmodalCollapsed] = useState(false);\n  const {\n    usersActive,\n    usersInactive,\n    setReloadUsers\n  } = props;\n  const [viewUsersActives, setViewUsersActives] = useState(true);\n  const [modalTitle, setModalTitle] = useState(\"\");\n  const [modalContent, setModalContent] = useState(null); //const [modalSignUpVisible,setModalSignUpVisible] = useState(false)\n\n  const token = getAccessToken();\n  /***********Elmiminar usuario con notification Confirm***************\r\n    const deleteUser = user =>{\r\n      const close1 = (user,b) => {\r\n        if(b){\r\n          deleteUserApi(token, user._id).then((result) => {\r\n            notification[\"success\"]({\r\n              message: result.message,\r\n            });\r\n            setReloadUsers(true)\r\n          });\r\n        }\r\n      };\r\n      const key = `open${Date.now()}`;\r\n      const btn = (\r\n        <Button type=\"primary\" \r\n        size=\"small\" \r\n        onClick={() => close1(user,true)}>\r\n          Confirmar\r\n        </Button>\r\n      );\r\n      notification.open({\r\n        message: 'Eliminar usuario',\r\n        description:\r\n          'Desea eliminar el usuario?',\r\n        btn,\r\n        key,\r\n        onClose: close1(user,false),\r\n      });\r\n    }\r\n  ***************************************************/\n\n  /**********Eliminar usuario Modal Antd*****************/\n\n  const deleteUser = user => {\n    confirm({\n      title: \"Eliminar Usuario\",\n      content: \"Desea eliminar?\",\n      okText: \"Eliminar\",\n      okType: \"danger\",\n      cancelText: \"Cancelar\",\n\n      onOk() {\n        deleteUserApi(token, user._id).then(result => {\n          notification[\"success\"]({\n            message: result.message\n          });\n          setReloadUsers(true);\n        });\n      }\n\n    });\n  };\n  /***************************************************/\n\n\n  const creatUser = () => {\n    setmodalCollapsed(!modalCollapsed);\n    setModalTitle(`Nuevo usuario`);\n    setModalContent( /*#__PURE__*/_jsxDEV(CreateUserForm, {\n      setmodalCollapsed: setmodalCollapsed,\n      setReloadUsers: setReloadUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 26\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list-users\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-users__header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-users__header-switch\",\n        children: [/*#__PURE__*/_jsxDEV(Switch, {\n          defaultChecked: true,\n          onChange: () => setViewUsersActives(!viewUsersActives)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \", viewUsersActives ? \"UsuariosActivos\" : \"Usuarios inactivos\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 16\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-users__header-btn-add-user\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          onClick: () => {\n            creatUser();\n          },\n          children: [/*#__PURE__*/_jsxDEV(UserAddOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), \"Nuevo usuario \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), \" \", viewUsersActives ? /*#__PURE__*/_jsxDEV(UsersActive, {\n      usersActive: usersActive,\n      setmodalCollapsed: setmodalCollapsed,\n      modalCollapsed: modalCollapsed,\n      setModalTitle: setModalTitle,\n      setModalContent: setModalContent,\n      setReloadUsers: setReloadUsers,\n      deleteUser: deleteUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 34\n    }, this) : /*#__PURE__*/_jsxDEV(UsersInactive, {\n      usersInactive: usersInactive,\n      setReloadUsers: setReloadUsers,\n      deleteUser: deleteUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: modalTitle,\n      isVisible: modalCollapsed,\n      setIsVisible: setmodalCollapsed,\n      children: [\" \", modalContent, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 18\n  }, this);\n}\n\n_s(ListUsers, \"BfLfHvEBFhdejnHJHENw8Cf9Mlw=\");\n\n_c = ListUsers;\n\nfunction UsersActive(props) {\n  const {\n    usersActive,\n    setmodalCollapsed,\n    modalCollapsed,\n    setModalContent,\n    setModalTitle,\n    setReloadUsers,\n    deleteUser\n  } = props;\n  const token = getAccessToken();\n\n  const editUser = user => {\n    //console.log(\"1.\"+user);\n    setmodalCollapsed(!modalCollapsed);\n    setModalTitle(`Editar ${user.name ? user.name : '...'} ${user.lastName ? user.lastName : '...'}`);\n    setModalContent( /*#__PURE__*/_jsxDEV(EditUserForm, {\n      user: user,\n      setmodalCollapsed: setmodalCollapsed,\n      setReloadUsers: setReloadUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 30\n    }, this));\n  };\n\n  const desactiveUser = user => {\n    const body = {\n      \"active\": false\n    };\n    activeDesactiveUserApi(token, body, user._id).then(result => {\n      notification[\"success\"]({\n        message: result.message\n      });\n      setReloadUsers(true);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(List, {\n    className: \"users-active\",\n    itemLayout: \"horizontal\",\n    dataSource: usersActive,\n    renderItem: user => /*#__PURE__*/_jsxDEV(UserActive, {\n      user: user,\n      editUser: editUser,\n      desactiveUser: desactiveUser,\n      deleteUser: deleteUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 22\n  }, this);\n}\n\n_c2 = UsersActive;\n\nfunction UserActive(props) {\n  _s2();\n\n  const {\n    user,\n    editUser,\n    desactiveUser,\n    deleteUser\n  } = props;\n  const [avatar, setAvatar] = useState(null);\n  useEffect(() => {\n    if (user.avatar) {\n      getAvatarApi(user.avatar).then(response => {\n        setAvatar(response);\n      });\n    } else {\n      setAvatar(null);\n    }\n  }, [avatar]);\n  return /*#__PURE__*/_jsxDEV(List.Item, {\n    actions: [/*#__PURE__*/_jsxDEV(Tooltip, {\n      title: \"Editar\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: () => editUser(user),\n        children: /*#__PURE__*/_jsxDEV(EditOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 29\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"danger\",\n      onClick: () => desactiveUser(user),\n      children: /*#__PURE__*/_jsxDEV(StopOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 41\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"danger\",\n      onClick: () => deleteUser(user),\n      children: /*#__PURE__*/_jsxDEV(DeleteOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 39\n    }, this)],\n    children: [/*#__PURE__*/_jsxDEV(List.Item.Meta, {\n      avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n        src: avatar ? avatar : NoAvatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 47\n      }, this),\n      title: `\n                      ${user.name ? user.name : \"..\"}\n                      ${user.lastName ? user.lastName : \"...\"}\n                  `,\n      description: user.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 21\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 26\n  }, this);\n}\n\n_s2(UserActive, \"X3aSP2TuZtJcozzJUSg2sRpN1Z4=\");\n\n_c3 = UserActive;\n\nfunction UsersInactive(props) {\n  const {\n    usersInactive,\n    setReloadUsers,\n    deleteUser\n  } = props;\n  const token = getAccessToken();\n\n  const activarUsuario = user => {\n    const body = {\n      \"active\": true\n    };\n    activeDesactiveUserApi(token, body, user._id).then(result => {\n      notification[\"success\"]({\n        message: result.message\n      });\n      setReloadUsers(true);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(List, {\n    className: \"users-active\",\n    itemLayout: \"horizontal\",\n    dataSource: usersInactive,\n    renderItem: user => /*#__PURE__*/_jsxDEV(UserInactive, {\n      user: user,\n      activarUsuario: activarUsuario,\n      deleteUser: deleteUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 29\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 30\n  }, this);\n}\n\n_c4 = UsersInactive;\n\nfunction UserInactive(props) {\n  _s3();\n\n  const {\n    user,\n    activarUsuario,\n    deleteUser\n  } = props;\n  const [avatar, setAvatar] = useState(null);\n  useEffect(() => {\n    if (user.avatar) {\n      getAvatarApi(user.avatar).then(response => {\n        setAvatar(response);\n      });\n    } else {\n      setAvatar(null);\n    }\n  }, [avatar]);\n  return /*#__PURE__*/_jsxDEV(List.Item, {\n    actions: [/*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      onClick: () => activarUsuario(user),\n      children: /*#__PURE__*/_jsxDEV(CheckOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 35\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"danger\",\n      onClick: () => deleteUser(user),\n      children: /*#__PURE__*/_jsxDEV(DeleteOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 47\n    }, this)],\n    children: [/*#__PURE__*/_jsxDEV(List.Item.Meta, {\n      avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n        src: avatar ? avatar : NoAvatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 55\n      }, this),\n      title: `\n                      ${user.name ? user.name : \"..\"}\n                      ${user.lastName ? user.lastName : \"...\"}\n                  `,\n      description: user.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 29\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 34\n  }, this);\n}\n\n_s3(UserInactive, \"X3aSP2TuZtJcozzJUSg2sRpN1Z4=\");\n\n_c5 = UserInactive;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ListUsers\");\n$RefreshReg$(_c2, \"UsersActive\");\n$RefreshReg$(_c3, \"UserActive\");\n$RefreshReg$(_c4, \"UsersInactive\");\n$RefreshReg$(_c5, \"UserInactive\");","map":{"version":3,"sources":["C:/CURSOSUDEMY/PRACTICOS/CURSO MERN/ProyectoWebPersonal/web-personal-cliente/src/components/Admin/User/ListUsers/ListUsers.js"],"names":["React","useState","useEffect","EditOutlined","StopOutlined","DeleteOutlined","CheckOutlined","UserAddOutlined","Tooltip","Switch","List","Button","Avatar","notification","Modal","ModalAntd","NoAvatar","getAvatarApi","activeDesactiveUserApi","deleteUserApi","EditUserForm","CreateUserForm","getAccessToken","confirm","ListUsers","props","modalCollapsed","setmodalCollapsed","usersActive","usersInactive","setReloadUsers","viewUsersActives","setViewUsersActives","modalTitle","setModalTitle","modalContent","setModalContent","token","deleteUser","user","title","content","okText","okType","cancelText","onOk","_id","then","result","message","creatUser","UsersActive","editUser","name","lastName","desactiveUser","body","UserActive","avatar","setAvatar","response","email","UsersInactive","activarUsuario","UserInactive"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./ListUsers.scss\";\r\nimport { EditOutlined, StopOutlined, DeleteOutlined, CheckOutlined, UserAddOutlined } from \"@ant-design/icons\";\r\nimport { Tooltip, Switch, List, Button, Avatar, notification, Modal as ModalAntd } from \"antd\";\r\nimport NoAvatar from \"../../../../assets/img/png/no-avatar.png\";\r\nimport Modal from \"../../../Admin/Modal\";\r\n//import User from \"../../../../pages/Admin/Users/Users\";\r\nimport { getAvatarApi, activeDesactiveUserApi, deleteUserApi } from '../../../../api/user';\r\nimport EditUserForm from \"../../../../components/Admin/User/EditUserForm\";\r\nimport CreateUserForm from \"../../../../components/Admin/User/CreateUserForm\";\r\nimport { getAccessToken } from \"../../../../api/auth\";\r\n\r\nconst { confirm } = ModalAntd;\r\n\r\nexport default function ListUsers(props) {\r\n    const [modalCollapsed, setmodalCollapsed] = useState(false);\r\n    const { usersActive, usersInactive, setReloadUsers } = props;\r\n    const [viewUsersActives, setViewUsersActives] = useState(true);\r\n    const [modalTitle, setModalTitle] = useState(\"\");\r\n    const [modalContent, setModalContent] = useState(null);\r\n    //const [modalSignUpVisible,setModalSignUpVisible] = useState(false)\r\n    const token = getAccessToken();\r\n    /***********Elmiminar usuario con notification Confirm***************\r\n      const deleteUser = user =>{\r\n        const close1 = (user,b) => {\r\n          if(b){\r\n            deleteUserApi(token, user._id).then((result) => {\r\n              notification[\"success\"]({\r\n                message: result.message,\r\n              });\r\n              setReloadUsers(true)\r\n            });\r\n          }\r\n        };\r\n        const key = `open${Date.now()}`;\r\n        const btn = (\r\n          <Button type=\"primary\" \r\n          size=\"small\" \r\n          onClick={() => close1(user,true)}>\r\n            Confirmar\r\n          </Button>\r\n        );\r\n        notification.open({\r\n          message: 'Eliminar usuario',\r\n          description:\r\n            'Desea eliminar el usuario?',\r\n          btn,\r\n          key,\r\n          onClose: close1(user,false),\r\n        });\r\n      }\r\n    ***************************************************/\r\n    /**********Eliminar usuario Modal Antd*****************/\r\n    const deleteUser = user => {\r\n            confirm({\r\n                title: \"Eliminar Usuario\",\r\n                content: \"Desea eliminar?\",\r\n                okText: \"Eliminar\",\r\n                okType: \"danger\",\r\n                cancelText: \"Cancelar\",\r\n                onOk() {\r\n                    deleteUserApi(token, user._id).then((result) => {\r\n                        notification[\"success\"]({\r\n                            message: result.message,\r\n                        });\r\n                        setReloadUsers(true)\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        /***************************************************/\r\n\r\n    const creatUser = () => {\r\n        setmodalCollapsed(!modalCollapsed)\r\n        setModalTitle(`Nuevo usuario`);\r\n        setModalContent( < CreateUserForm setmodalCollapsed = { setmodalCollapsed }\r\n            setReloadUsers = { setReloadUsers }\r\n            />);\r\n        }\r\n\r\n\r\n        return ( <\r\n            div className = \"list-users\" >\r\n            <\r\n            div className = \"list-users__header\" >\r\n            <\r\n            div className = \"list-users__header-switch\" >\r\n            <\r\n            Switch defaultChecked onChange = {\r\n                () => setViewUsersActives(!viewUsersActives)\r\n            }\r\n            /> <\r\n            span > { viewUsersActives ? \"UsuariosActivos\" : \"Usuarios inactivos\" } <\r\n            /span> < /\r\n            div > <\r\n            div className = \"list-users__header-btn-add-user\" >\r\n            <\r\n            Button type = \"primary\"\r\n            onClick = {\r\n                () => { creatUser() }\r\n            } >\r\n            <\r\n            UserAddOutlined / >\r\n            Nuevo usuario <\r\n            /Button> < /\r\n            div > <\r\n            /div> {\r\n            viewUsersActives ? ( <\r\n                UsersActive usersActive = { usersActive }\r\n                setmodalCollapsed = { setmodalCollapsed }\r\n                modalCollapsed = { modalCollapsed }\r\n                setModalTitle = { setModalTitle }\r\n                setModalContent = { setModalContent }\r\n                setReloadUsers = { setReloadUsers }\r\n                deleteUser = { deleteUser }\r\n\r\n                />\r\n            ) : ( <\r\n                UsersInactive usersInactive = { usersInactive }\r\n                setReloadUsers = { setReloadUsers }\r\n                deleteUser = { deleteUser }\r\n                />\r\n            )\r\n        }\r\n\r\n        <\r\n        Modal title = { modalTitle }\r\n        isVisible = { modalCollapsed }\r\n        setIsVisible = { setmodalCollapsed } > { modalContent } <\r\n            /Modal> < /\r\n            div >\r\n    );\r\n}\r\n\r\nfunction UsersActive(props) {\r\n    const {\r\n        usersActive,\r\n        setmodalCollapsed,\r\n        modalCollapsed,\r\n        setModalContent,\r\n        setModalTitle,\r\n        setReloadUsers,\r\n        deleteUser\r\n    } = props;\r\n    const token = getAccessToken();\r\n    const editUser = user => {\r\n            //console.log(\"1.\"+user);\r\n            setmodalCollapsed(!modalCollapsed)\r\n            setModalTitle(`Editar ${user.name ? user.name : '...'} ${user.lastName ? user.lastName : '...'}`);\r\n            setModalContent( < EditUserForm user = { user }\r\n                setmodalCollapsed = { setmodalCollapsed }\r\n                setReloadUsers = { setReloadUsers }\r\n                />);\r\n            }\r\n\r\n            const desactiveUser = user => {\r\n                const body = {\r\n                    \"active\": false\r\n                };\r\n                activeDesactiveUserApi(token, body, user._id).then((result) => {\r\n                    notification[\"success\"]({\r\n                        message: result.message,\r\n                    });\r\n                    setReloadUsers(true)\r\n                });\r\n            }\r\n\r\n            return ( <\r\n                List className = \"users-active\"\r\n                itemLayout = \"horizontal\"\r\n                dataSource = { usersActive }\r\n                renderItem = {\r\n                    user =>\r\n                    <\r\n                    UserActive\r\n                    user = { user }\r\n                    editUser = { editUser }\r\n                    desactiveUser = { desactiveUser }\r\n                    deleteUser = { deleteUser }\r\n                    />} / >\r\n                );\r\n            }\r\n\r\n            function UserActive(props) {\r\n                const { user, editUser, desactiveUser, deleteUser } = props;\r\n                const [avatar, setAvatar] = useState(null);\r\n\r\n                useEffect(() => {\r\n                    if (user.avatar) {\r\n                        getAvatarApi(user.avatar).then(response => {\r\n                            setAvatar(response);\r\n                        })\r\n                    } else {\r\n                        setAvatar(null);\r\n                    }\r\n                }, [avatar]);\r\n\r\n\r\n                return ( <\r\n                    List.Item actions = {\r\n                        [ <\r\n                            Tooltip title = \"Editar\" >\r\n                            <\r\n                            Button\r\n                            type = \"primary\"\r\n                            onClick = {\r\n                                () => editUser(user)\r\n                            } >\r\n                            <\r\n                            EditOutlined / >\r\n                            <\r\n                            /Button> < /\r\n                            Tooltip > , <\r\n                            Button\r\n                            type = \"danger\"\r\n                            onClick = {\r\n                                () => desactiveUser(user)\r\n                            } >\r\n                            <\r\n                            StopOutlined / >\r\n\r\n                            <\r\n                            /Button>, <\r\n                            Button\r\n                            type = \"danger\"\r\n                            onClick = {\r\n                                () => deleteUser(user)\r\n                            } >\r\n                            <\r\n                            DeleteOutlined / >\r\n                            <\r\n                            /Button>,\r\n                        ]\r\n                    } >\r\n                    <\r\n                    List.Item.Meta avatar = { < Avatar src = { avatar ? avatar : NoAvatar }\r\n                        />}\r\n                        title = { `\r\n                      ${user.name ? user.name : \"..\"}\r\n                      ${user.lastName ? user.lastName : \"...\"}\r\n                  ` }\r\n                        description = { user.email }\r\n                        /> < /\r\n                        List.Item >\r\n                    );\r\n                }\r\n\r\n                function UsersInactive(props) {\r\n                    const { usersInactive, setReloadUsers, deleteUser } = props;\r\n                    const token = getAccessToken();\r\n                    const activarUsuario = user => {\r\n                        const body = {\r\n                            \"active\": true\r\n                        };\r\n                        activeDesactiveUserApi(token, body, user._id).then((result) => {\r\n                            notification[\"success\"]({\r\n                                message: result.message,\r\n                            });\r\n                            setReloadUsers(true)\r\n                        });\r\n                    }\r\n\r\n                    return ( <\r\n                        List className = \"users-active\"\r\n                        itemLayout = \"horizontal\"\r\n                        dataSource = { usersInactive }\r\n                        renderItem = {\r\n                            user =>\r\n                            <\r\n                            UserInactive\r\n                            user = { user }\r\n                            activarUsuario = { activarUsuario }\r\n                            deleteUser = { deleteUser }\r\n                            />} / >\r\n                        );\r\n                    }\r\n\r\n                    function UserInactive(props) {\r\n                        const { user, activarUsuario, deleteUser } = props;\r\n                        const [avatar, setAvatar] = useState(null);\r\n\r\n                        useEffect(() => {\r\n                            if (user.avatar) {\r\n                                getAvatarApi(user.avatar).then(response => {\r\n                                    setAvatar(response);\r\n                                })\r\n                            } else {\r\n                                setAvatar(null);\r\n                            }\r\n                        }, [avatar]);\r\n\r\n                        return ( <\r\n                            List.Item actions = {\r\n                                [ <\r\n                                    Button\r\n                                    type = \"primary\"\r\n                                    onClick = {\r\n                                        () => activarUsuario(user)\r\n                                    } >\r\n                                    <\r\n                                    CheckOutlined / >\r\n                                    <\r\n                                    /Button>, <\r\n                                    Button\r\n                                    type = \"danger\"\r\n                                    onClick = {\r\n                                        () => deleteUser(user)\r\n                                    } >\r\n                                    <\r\n                                    DeleteOutlined / >\r\n                                    <\r\n                                    /Button>,\r\n                                ]\r\n                            } >\r\n                            <\r\n                            List.Item.Meta avatar = { < Avatar src = { avatar ? avatar : NoAvatar }\r\n                                />}\r\n                                title = { `\r\n                      ${user.name ? user.name : \"..\"}\r\n                      ${user.lastName ? user.lastName : \"...\"}\r\n                  ` }\r\n                                description = { user.email }\r\n                                /> < /\r\n                                List.Item >\r\n                            );\r\n                        }"]},"metadata":{},"sourceType":"module"}